// Definindo o datasource e o gerador de cliente
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


enum Role {
  STUDENT // comment
  TEACHER
  COORDINATOR
   
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

// Enum para `conceito` e `unidade`
enum ConceitoEnum {
  E // excelente
  B //bom
  R //regular
  I // insuficiente
}

enum UnidadeEnum {
  UNIT1
  UNIT2
  AVG
  FINAL 
}

enum ResultConceito {
  APPROVED
  FAILED 
}

enum AnnouncementType {
  EVENT 
  NEWS 

}
// Modelo `User`
model User {
  userId        String      @id @default(uuid()) @db.Char(36)
  userName      String      @db.VarChar(50)
  cpf           String      @unique @db.VarChar(11)
  email         String      @unique @db.VarChar(50)
  password      String      @db.VarChar(255)
  phone         String?     @db.VarChar(20)
  dateOfBirth   DateTime?
  role          Role
  image         String?     @db.VarChar(255)
  gender        Gender
  familyContact String?     @db.VarChar(20)
  affiliation   String?     @db.VarChar(20)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relações
  userClassCourses UserClassCourse[]
  announcements    Announcement[]
}

// Modelo `Course`
model Course {
  courseId    String            @id @default(uuid()) @db.Char(36)
  courseName  String            @db.VarChar(50)
  description String            @db.VarChar(2000)
  workload    Int               @db.Integer
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relações
  userClassCourses UserClassCourse[]
}

// Modelo `Class`
model Class {
  classId    String            @id @default(uuid()) @db.Char(36)
  className  String            @db.VarChar(50)
  year       Int               @db.Integer
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  // Relações
  userClassCourses UserClassCourse[]
}

// Modelo `UserClassCourse` para relação `User`, `Class` e `Course`
model UserClassCourse {
  user_class_courseId String   @id @default(uuid()) @db.VarChar(36)
  courseId            String   @db.Char(36)
  classId             String   @db.Char(36)
  userId              String   @db.Char(36)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relações
  user       User       @relation(fields: [userId], references: [userId])
  class      Class      @relation(fields: [classId], references: [classId])
  course     Course     @relation(fields: [courseId], references: [courseId])
  conceitos  Conceito[] // Relação inversa com `Conceito`

  // Índices compostos
  @@unique([courseId, classId, userId])
}

// Modelo `Conceito`
model Conceito {
  conceitoId          String        @id @default(uuid()) @db.Char(36)
  conceito            ConceitoEnum
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  unidade             UnidadeEnum
  result              ResultConceito //no prototipo situacao 
  user_class_courseId String        @db.VarChar(45)

  // Relações
  userClassCourse UserClassCourse @relation(fields: [user_class_courseId], references: [user_class_courseId])
}

// Modelo `Announcement`
model Announcement {
  announcementId String    @id @default(uuid()) @db.Char(36)
  title          String    @db.VarChar(50)
  content        String    @db.VarChar(2000)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  userId         String    @db.Char(36)
  announcementType AnnouncementType

  // Relações
  user User @relation(fields: [userId], references: [userId])
}
